Creating Data Base
1.show dbs
2.use mongo_practise
3.creating collections movie-db.createCollection("movies)
4.Inserting the documents-db.movies.insertMany({
	title:"Fight Club",
	writer:"Chuck Palahniuko",
	year:"1999",
	actors :["Brad Pitt","Edward Norton"]
	},
	{
		title:"Pulp Fiction",
		writer:"Quentin Tarantino",
		year:"1994",
		actors : ["John Travolta","Uma Thurman"]
	},
	{
		title:"Inglorious Basterds",
		writer:"Quentin Tarantino",
		year:"2009",
		actors : ["Brad Pitt","Diane Kruger","Eli Roth"]
	},
	{
		title:"The Hobbit: An Unexpected Journey",
		writer:"J.R.R. Tolkein",
		year:"2012",
		franchise:"The Hobbit"
	},
	{
		title:"The Hobbit: The Desolation of Smaug",
		writer:"J.R.R. Tolkein",
		year:"2013",
		franchise:"The Hobbit"
	},
	{
		title:"The Hobbit: The Battle of the Five Armies",
		writer:"J.R.R. Tolkein",
		year:"2012",
		franchise:"The Hobbit",
		synopsis:"Bilbo and Company are forced to engage in a war against an array ofcombatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
	},
	{
		title:"Pee Wee Herman's Big Adventure"

	},
	{
		title:"Avatar"
	}
	]
	)
Query the movies collection to:
1.get all documents--db.movies.find()
2.get all documents with writer set to "Quentin Tarantino"-- db.movies.find({writer :"Quentin Tarantino"})
3.get all documents where actors include "Brad Pitt"-- db.movies.find({actors :"Brad Pitt"})
4.get all documents with franchise set to "The Hobbit"-- db.movies.find({franchise : "The Hobbit"})
5.get all movies released in the 90s--db.movies.find({year:{$gt:"1990",$lt:"2000"}})
6.get all movies released before the year 2000 or after 2010--db.movies.find({$or:[{year: {$gt:"2010"}},{year: {$lt:"2000"}}]})


Update Documents
1.db.movies.updateOne({title :"The Hobbit: An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
2.db.movies.updateOne({title:"The Hobbit: The Desolation of Smaug"}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
3.db.movies.updateOne({title:"Pulp Fiction"},{$push:{actor:"Samuel L. Jackson"}})

Text Search

For ceating the text search we will creating indexes for fasters execution and for text serach
creating the index--db.movies.createIndex({synopsis:"text"})

1.find all movies that have a synopsis that contains the word "Bilbo"---db.movies.find({$text:{$search:"Bilbo"}})
2.find all movies that have a synopsis that contains the word "Gandalf"--db.movies.find({$text:{$search:"Gandalf"}})
3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"--db.movies.find({$text: {$search: "Bilbo -Gandalf"}})
4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"--db.movies.find({$text: {$search: "dwarves hobbit"}})
5. find all movies that have a synopsis that contains the word "gold" and "dragon"--db.movies.find({$text: {$search: "gold dragon"}})

Delete Documents

1.delete the movie "Pee Wee Herman's Big Adventure"--db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
2. delete the movie "Avatar"---db.movies.remove({title: "Avatar"})

Relations

1.created user collections and inserting the document----db.users.insertMany([{username:"GoodGuyGreg",
					first_name:"Good Guy",
					lastname:"Greg"},
					{username:"ScumbagSteve",
					fullname:{first:"Scumbag",last:"Steve"}}])
2.created a collection posts and insert the documents---db.posts.insertMany([{username : GoodGuyGreg,
                                                                              title : Passes out at party, 
                                                                              body : Wakes up early and cleans house},
                                                                              {username : GoodGuyGreg, 
                                                                               title : Steals your identity, 
                                                                               body : Raises your credit score}, 
                                                                               {username : GoodGuyGreg, 
                                                                                title : Reports a bug in your code, 
                                                                                body : Sends you a Pull Request},
                                                                                {username : ScumbagSteve, 
                                                                                 title : Borrows something, 
                                                                                 body : Sells it}, 
                                                                                {username : ScumbagSteve, 
                                                                                 title : Borrows everything, 
                                                                                 body : The end}, 
                                                                                {username : ScumbagSteve,
                                                                                 title : Forks your repo on github, 
                                                                                 body : Sets to private}])

3.created a collection comments and insert the documents---db.comments.insertMany([{username:"GoodGuyGreg",
							comment:"Hope you got a good deal!",
							post:ObjectId("5ffd71b2abdee923fc6e63dc")
						},
						{
							username:"GoodGuyGreg",
							comment:"What's mine is yours",
							post:ObjectId("5ffd71b2abdee923fc6e63dd")
						},
						{
							username:"GoodGuyGreg",
							comment:"Don't violate the licensing agreement!",
							post:ObjectId("5ffd71b2abdee923fc6e63de")
						},
						{
							username:"ScumbagSteve",
							comment:"It still isn't clean",
							post:ObjectId("5ffd71b2abdee923fc6e63d9")

						},
						{
							username:"ScumbagSteve",
							comment:"Denied your PR cause I found a hack",
							post:ObjectId("5ffd71b2abdee923fc6e63db")
						}
						])

1. find all users---db.users.find()
2. find all posts--db.posts.find()
3. find all posts that was authored by "GoodGuyGreg"----db.posts.find({username:"GoodGuyGreg"})
4. find all posts that was authored by "ScumbagSteve"---db.posts.find({username:"ScumbagSteve"})
5. find all comments--db.comments.find()
6. find all comments that was authored by "GoodGuyGreg"---- db.comments.find({username:"GoodGuyGreg"})
7. find all comments that was authored by "ScumbagSteve"---db.comments.find({username:"ScumbagSteve"})
8. find all comments belonging to the post "Reports a bug in your code"---db.comments.find({post :ObjectId("60054059dc6852603ddbc9cf")})


