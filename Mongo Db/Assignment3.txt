1. Write a MongoDB query to display all the documents in the collection restaurants.
db.addresses.find().pretty()

2.Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

db.addresses.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()
{
        "_id" : ObjectId("600595847b8e8c28c0dfa816"),
        "borough" : "Bronx",
        "cuisine" : "Bakery",
        "name" : "Morris Park Bake Shop",
        "restaurant_id" : "30075445"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa817"),
        "borough" : "Brooklyn",
        "cuisine" : "Hamburgers",
        "name" : "Wendy'S",
        "restaurant_id" : "30112340"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa818"),
        "borough" : "Manhattan",
        "cuisine" : "Irish",
        "name" : "Dj Reynolds Pub And Restaurant",
        "restaurant_id" : "30191841"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa819"),
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "Riviera Caterer",
        "restaurant_id" : "40356018"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81a"),
        "borough" : "Queens",
        "cuisine" : "Jewish/Kosher",
        "name" : "Tov Kosher Kitchen",
        "restaurant_id" : "40356068"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81b"),
        "borough" : "Queens",
        "cuisine" : "American ",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81c"),
        "borough" : "Staten Island",
        "cuisine" : "Jewish/Kosher",
        "name" : "Kosher Island",
        "restaurant_id" : "40356442"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81d"),
        "borough" : "Brooklyn",
        "cuisine" : "Delicatessen",
        "name" : "Wilken'S Fine Food",
        "restaurant_id" : "40356483"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81e"),
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "Regina Caterers",
        "restaurant_id" : "40356649"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa81f"),
        "borough" : "Brooklyn",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Taste The Tropics Ice Cream",
        "restaurant_id" : "40356731"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa820"),
        "borough" : "Bronx",
        "cuisine" : "American ",
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa821"),
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "C & C Catering Service",
        "restaurant_id" : "40357437"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa822"),
        "borough" : "Brooklyn",
        "cuisine" : "Chinese",
        "name" : "May May Kitchen",
        "restaurant_id" : "40358429"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa823"),
        "borough" : "Manhattan",
        "cuisine" : "American ",
        "name" : "1 East 66Th Street Kitchen",
        "restaurant_id" : "40359480"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa824"),
        "borough" : "Brooklyn",
        "cuisine" : "Jewish/Kosher",
        "name" : "Seuda Foods",
        "restaurant_id" : "40360045"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa825"),
        "borough" : "Brooklyn",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40360076"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa826"),
        "borough" : "Queens",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40361322"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa827"),
        "borough" : "Brooklyn",
        "cuisine" : "Delicatessen",
        "name" : "Nordic Delicacies",
        "restaurant_id" : "40361390"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa828"),
        "borough" : "Manhattan",
        "cuisine" : "American ",
        "name" : "Glorious Food",
        "restaurant_id" : "40361521"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa829"),
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "The Movable Feast",
        "restaurant_id" : "40361606"
}

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
db.addresses.find({},{"_id":0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()
{
        "borough" : "Bronx",
        "cuisine" : "Bakery",
        "name" : "Morris Park Bake Shop",
        "restaurant_id" : "30075445"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Hamburgers",
        "name" : "Wendy'S",
        "restaurant_id" : "30112340"
}
{
        "borough" : "Manhattan",
        "cuisine" : "Irish",
        "name" : "Dj Reynolds Pub And Restaurant",
        "restaurant_id" : "30191841"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "Riviera Caterer",
        "restaurant_id" : "40356018"
}
{
        "borough" : "Queens",
        "cuisine" : "Jewish/Kosher",
        "name" : "Tov Kosher Kitchen",
        "restaurant_id" : "40356068"
}
{
        "borough" : "Queens",
        "cuisine" : "American ",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
}
{
        "borough" : "Staten Island",
        "cuisine" : "Jewish/Kosher",
        "name" : "Kosher Island",
        "restaurant_id" : "40356442"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Delicatessen",
        "name" : "Wilken'S Fine Food",
        "restaurant_id" : "40356483"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "Regina Caterers",
        "restaurant_id" : "40356649"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Taste The Tropics Ice Cream",
        "restaurant_id" : "40356731"
}
{
        "borough" : "Bronx",
        "cuisine" : "American ",
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "C & C Catering Service",
        "restaurant_id" : "40357437"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Chinese",
        "name" : "May May Kitchen",
        "restaurant_id" : "40358429"
}
{
        "borough" : "Manhattan",
        "cuisine" : "American ",
        "name" : "1 East 66Th Street Kitchen",
        "restaurant_id" : "40359480"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Jewish/Kosher",
        "name" : "Seuda Foods",
        "restaurant_id" : "40360045"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40360076"
}
{
        "borough" : "Queens",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40361322"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "Delicatessen",
        "name" : "Nordic Delicacies",
        "restaurant_id" : "40361390"
}
{
        "borough" : "Manhattan",
        "cuisine" : "American ",
        "name" : "Glorious Food",
        "restaurant_id" : "40361521"
}
{
        "borough" : "Brooklyn",
        "cuisine" : "American ",
        "name" : "The Movable Feast",
        "restaurant_id" : "40361606"
}
Type "it" for more


4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 

> db.addresses.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0}).pretty()
{
        "address" : {
                "zipcode" : "10462"
        },
        "borough" : "Bronx",
        "name" : "Morris Park Bake Shop",
        "restaurant_id" : "30075445"
}
{
        "address" : {
                "zipcode" : "11225"
        },
        "borough" : "Brooklyn",
        "name" : "Wendy'S",
        "restaurant_id" : "30112340"
}
{
        "address" : {
                "zipcode" : "10019"
        },
        "borough" : "Manhattan",
        "name" : "Dj Reynolds Pub And Restaurant",
        "restaurant_id" : "30191841"
}
{
        "address" : {
                "zipcode" : "11224"
        },
        "borough" : "Brooklyn",
        "name" : "Riviera Caterer",
        "restaurant_id" : "40356018"
}
{
        "address" : {
                "zipcode" : "11374"
        },
        "borough" : "Queens",
        "name" : "Tov Kosher Kitchen",
        "restaurant_id" : "40356068"
}
{
        "address" : {
                "zipcode" : "11369"
        },
        "borough" : "Queens",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
}
{
        "address" : {
                "zipcode" : "10314"
        },
        "borough" : "Staten Island",
        "name" : "Kosher Island",
        "restaurant_id" : "40356442"
}
{
        "address" : {
                "zipcode" : "11234"
        },
        "borough" : "Brooklyn",
        "name" : "Wilken'S Fine Food",
        "restaurant_id" : "40356483"
}
{
        "address" : {
                "zipcode" : "11219"
        },
        "borough" : "Brooklyn",
        "name" : "Regina Caterers",
        "restaurant_id" : "40356649"
}
{
        "address" : {
                "zipcode" : "11226"
        },
        "borough" : "Brooklyn",
        "name" : "Taste The Tropics Ice Cream",
        "restaurant_id" : "40356731"
}
{
        "address" : {
                "zipcode" : "10460"
        },
        "borough" : "Bronx",
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
{
        "address" : {
                "zipcode" : "11214"
        },
        "borough" : "Brooklyn",
        "name" : "C & C Catering Service",
        "restaurant_id" : "40357437"
}
{
        "address" : {
                "zipcode" : "11208"
        },
        "borough" : "Brooklyn",
        "name" : "May May Kitchen",
        "restaurant_id" : "40358429"
}
{
        "address" : {
                "zipcode" : "10065"
        },
        "borough" : "Manhattan",
        "name" : "1 East 66Th Street Kitchen",
        "restaurant_id" : "40359480"
}
{
        "address" : {
                "zipcode" : "11223"
        },
        "borough" : "Brooklyn",
        "name" : "Seuda Foods",
        "restaurant_id" : "40360045"
}
{
        "address" : {
                "zipcode" : "11218"
        },
        "borough" : "Brooklyn",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40360076"
}
{
        "address" : {
                "zipcode" : "11004"
        },
        "borough" : "Queens",
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40361322"
}
{
        "address" : {
                "zipcode" : "11209"
        },
        "borough" : "Brooklyn",
        "name" : "Nordic Delicacies",
        "restaurant_id" : "40361390"
}
{
        "address" : {
                "zipcode" : "10021"
        },
        "borough" : "Manhattan",
        "name" : "Glorious Food",
        "restaurant_id" : "40361521"
}
{
        "address" : {
                "zipcode" : "11215"
        },
        "borough" : "Brooklyn",
        "name" : "The Movable Feast",
        "restaurant_id" : "40361606"


5.Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.addresses.find({"borough":"Bronx"}).limit(5).pretty()
{
        "_id" : ObjectId("600595847b8e8c28c0dfa816"),
        "address" : {
                "building" : "1007",
                "coord" : [
                        -73.856077,
                        40.848447
                ],
                "street" : "Morris Park Ave",
                "zipcode" : "10462"
        },
        "borough" : "Bronx",
        "cuisine" : "Bakery",
        "grades" : [
                {
                        "date" : ISODate("2014-03-03T00:00:00Z"),
                        "grade" : "A",
                        "score" : 2
                },
                {
                        "date" : ISODate("2013-09-11T00:00:00Z"),
                        "grade" : "A",
                        "score" : 6
                },
                {
                        "date" : ISODate("2013-01-24T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2011-11-23T00:00:00Z"),
                        "grade" : "A",
                        "score" : 9
                },
                {
                        "date" : ISODate("2011-03-10T00:00:00Z"),
                        "grade" : "B",
                        "score" : 14
                }
        ],
        "name" : "Morris Park Bake Shop",
        "restaurant_id" : "30075445"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa820"),
        "address" : {
                "building" : "2300",
                "coord" : [
                        -73.8786113,
                        40.8502883
                ],
                "street" : "Southern Boulevard",
                "zipcode" : "10460"
        },
        "borough" : "Bronx",
        "cuisine" : "American ",
        "grades" : [
                {
                        "date" : ISODate("2014-05-28T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2013-06-19T00:00:00Z"),
                        "grade" : "A",
                        "score" : 4
                },
                {
                        "date" : ISODate("2012-06-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 3
                }
        ],
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa835"),
        "address" : {
                "building" : "1006",
                "coord" : [
                        -73.84856870000002,
                        40.8903781
                ],
                "street" : "East 233 Street",
                "zipcode" : "10466"
        },
        "borough" : "Bronx",
        "cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
        "grades" : [
                {
                        "date" : ISODate("2014-04-24T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2013-09-05T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2013-02-21T00:00:00Z"),
                        "grade" : "A",
                        "score" : 9
                },
                {
                        "date" : ISODate("2012-07-03T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2011-07-11T00:00:00Z"),
                        "grade" : "A",
                        "score" : 5
                }
        ],
        "name" : "Carvel Ice Cream",
        "restaurant_id" : "40363093"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa839"),
        "address" : {
                "building" : "1236",
                "coord" : [
                        -73.8893654,
                        40.81376179999999
                ],
                "street" : "238 Spofford Ave",
                "zipcode" : "10474"
        },
        "borough" : "Bronx",
        "cuisine" : "Chinese",
        "grades" : [
                {
                        "date" : ISODate("2013-12-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 8
                },
                {
                        "date" : ISODate("2013-01-08T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2012-06-12T00:00:00Z"),
                        "grade" : "B",
                        "score" : 15
                }
        ],
        "name" : "Happy Garden",
        "restaurant_id" : "40363289"
}
{
        "_id" : ObjectId("600595847b8e8c28c0dfa84b"),
        "address" : {
                "building" : "277",
                "coord" : [
                        -73.8941893,
                        40.8634684
                ],
                "street" : "East Kingsbridge Road",
                "zipcode" : "10458"
        },
        "borough" : "Bronx",
        "cuisine" : "Chinese",
        "grades" : [
                {
                        "date" : ISODate("2014-03-03T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2013-09-26T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2013-03-19T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2012-08-29T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2011-08-17T00:00:00Z"),
                        "grade" : "A",
                        "score" : 13
                }
        ],
        "name" : "Happy Garden",
        "restaurant_id" : "40364296"
}

6. Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.addresses.find({"borough":"Bronx"}).pretty()

7.7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.addresses.find({"borough":"Bronx"}).skip(5).limit(5).pretty()

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.

 db.addresses.find({"grades.score":{$gt:90}}).pretty()

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.addresses.find({"grades.score":{$gt:80,$lt:100}}).pretty()

10.Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.

db.addresses.find({"address.coord":{$lt: -95.754168}}).pretty()

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

db.addresses.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt: -65.754168}}]}).pretty()

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.

db.addresses.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt: -65.754168}}]})

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

db.addresses.find({$and:[{"cuisine":{$ne:"American"}},{"grades.grade":"A"},{"borough":{$ne:"Brooklyn"}}]}).sort({"cuisine":-1})

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.

db.addresses.find({name:/^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.

db.addresses.find({name:/ces$/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.

db.addresses.find({name:/.*Reg.*/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

db.addresses.find({"borough":"Bronx", $or:[{"cuisine":"American"},{"cuisine":"Chinese"}]})

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.

db.addresses.find({$or:[{"borough":"Staten Island"},{"borough":"Quuens"},{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"restaurant_id":1,"name":1,"cuisine":1})

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.

db.addresses.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } )

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.

db.addresses.find({"grades.score":{$lte:10}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

 db.addresses.find( {$or: [{name: /^Wil/},{"$and": [{"cuisine" : {$ne :"American "}},{"cuisine" : {$ne :"Chinees"}}]}]} ,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1})

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..

db.addresses.find({"grades.date":ISODate("2014-08-11T00:00:00Z"),"grades.grade":"A","grades.score":11},{"restaurant_id":1,"name":1,"grades":1})

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z"

db.addresses.find({"grades.1.date":ISODate("2014-08-11T00:00:00Z"),"grades.1.grade":"A","grades.1.score":9},{"restaurant_id":1,"name":1,"grades":1})

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..

db.addresses.find({"address.coord.1":{$gt:42,$lte:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1})

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

db.addresses.find().sort({"name":1})

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

db.addresses.find().sort({"name":-1})

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.

db.addresses.find().sort({"cuisine":1,"borough":-1})

28. Write a MongoDB query to know whether all the addresses contains the street or not.

db.addresses.find({"address.street":{$exists:true}})

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.

db.addresses.find({"address.ccord":{$type:1}})

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.

db.addresses.find({"grades.score":{$mod:[7,0]}},{"restaurant_id":1,"name":1,"grades":1})

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.

db.addresses.find({name:/.*mon.*/},{"name":1,"borough":1,"address.coord":1,"cuisine":1})

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.

db.addresses.find({name:/^Mad/},{"name":1,"borough":1,"address.coord":1,"cuisine":1})